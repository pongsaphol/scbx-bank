{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Create a new account with the zero balance",
      "type": "object",
      "required": [
        "create_account"
      ],
      "properties": {
        "create_account": {
          "type": "object",
          "required": [
            "account_name"
          ],
          "properties": {
            "account_name": {
              "description": "The account name of the account to create",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive forwards received cw20 tokens to an execution logic (in case of Deposit)",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw funds from an account",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "account",
            "amount"
          ],
          "properties": {
            "account": {
              "description": "The account to withdraw from",
              "type": "string"
            },
            "amount": {
              "description": "The amount to withdraw",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Transfer funds from one account to another",
      "type": "object",
      "required": [
        "transfer"
      ],
      "properties": {
        "transfer": {
          "type": "object",
          "required": [
            "amount",
            "from",
            "to"
          ],
          "properties": {
            "amount": {
              "description": "The amount to transfer",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "from": {
              "description": "The account to transfer from",
              "type": "string"
            },
            "to": {
              "description": "The account to transfer to",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Change the currency of an account",
      "type": "object",
      "required": [
        "change_currency"
      ],
      "properties": {
        "change_currency": {
          "type": "object",
          "required": [
            "currency"
          ],
          "properties": {
            "currency": {
              "description": "The new currency",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
